# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CensusVis2022Dialog
                                 A QGIS plugin
 Fetch and Visualize Census Data 2022
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Ardavan Sassani
        email                : a.sassani@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
import os
import json
import pandas as pd

from .SettingsDialog import SettingsDialog
from .nlp.panel import get_relevant_variables_nltk

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))

FORM_CLASS_MAIN, _ = uic.loadUiType(os.path.join(CURRENT_DIR, 'CenVis2022_dialog_base.ui'))


class CenVis2022Dialog(QtWidgets.QDialog, FORM_CLASS_MAIN):
    
    def __init__(self, parent=None):
        """Constructor."""
        super(CenVis2022Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.states = pd.read_json(f'{CURRENT_DIR}/constants/us_counties.json', dtype=False)
        self.get_settings()
        
        
        self.btnTest.clicked.connect(self.test)
        self.btnSettings.clicked.connect(self.open_settings_dialog)
        self.cbState.currentIndexChanged.connect(self.init_counties)
        self.btnGetItems.clicked.connect(self.get_items)
        
        self.init_states()
        
    def get_items(self):
        items = get_relevant_variables_nltk(self.txtQuery.toPlainText())
        self.lstVariablesList.clear()
        self.lstVariablesList.addItems(items.keys())
        # for item in items.keys():
        #     self.lstVariablesList.addItem(items[item],item)
        
    def get_settings(self):
        self.settings = {}
        if os.path.exists(os.path.join(CURRENT_DIR, 'settings.json')):
            with open(os.path.join(CURRENT_DIR, 'settings.json'), 'r') as f:
                self.settings = json.load(f)
        else:
            self.settings = {
                'census_api_key': 'Please set your API key', 
                'data_path': 'Please set your data path to save the data'}
            with open(os.path.join(CURRENT_DIR, 'settings.json'), 'w') as f:
                json.dump(self.settings, f)
            
                

    def open_settings_dialog(self):
        second_dialog = SettingsDialog(self, self.settings)
        _res = second_dialog.exec_()
        if _res == QtWidgets.QDialog.Accepted:
            self.get_settings()
        
    def test(self):
        print(CURRENT_DIR, self.settings)
        
    def init_states(self):
        for state in self.states.iterrows():
            self.cbState.addItem(state[1]['name'],state[1]['fips'])
        self.init_counties()
            
    def init_counties(self):
        self.cbCounty.clear()
        state_fips = self.cbState.currentData()
        counties = self.states[self.states['fips'] == state_fips]['counties']
        for county in counties.iloc[0]:
            self.cbCounty.addItem(county['name'],county['fips'])
            
            

