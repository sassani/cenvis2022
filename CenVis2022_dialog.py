# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CensusVis2022Dialog
                                 A QGIS plugin
 Fetch and Visualize Census Data 2022
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Ardavan Sassani
        email                : a.sassani@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import json
import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QDir
import pandas as pd
import os

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))

with open(os.path.join(os.path.dirname(__file__), 'settings.json'), 'r') as f:
    _settings = json.load(f)
    
CENSUS_API_KEY = _settings['census_api_key']
DATA_PATH = _settings['data_path']

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS_MAIN, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'CenVis2022_dialog_base.ui'))
FORM_CLASS_SETTINGS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'settings.ui'))


class CenVis2022Dialog(QtWidgets.QDialog, FORM_CLASS_MAIN):
    
    def __init__(self, parent=None):
        """Constructor."""
        super(CenVis2022Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # self.current_dir = os.path.dirname(os.path.abspath(__file__))
        self.states = pd.read_json(f'{CURRENT_DIR}/constants/us_counties.json', dtype=False)
        
        self.btnTest.clicked.connect(self.test)
        self.btnSettings.clicked.connect(self.open_settings)
        self.cbState.currentIndexChanged.connect(self.init_counties)
        
        self.init_states()

    def open_settings(self):
        second_dialog = SettingsDialog(self)
        _ = second_dialog.exec_()
        # print(result)
           
    def test(self):
        print(CURRENT_DIR, CENSUS_API_KEY, DATA_PATH)
        # print(self.cbState.currentText())
        # print(self.cbState.currentData())
        # print(self.cbCounty.currentText())
        # print(self.cbCounty.currentData())
        # second_dialog = SettingsDialog(self)
        # result = second_dialog.exec_()
        
    def init_states(self):
        for state in self.states.iterrows():
            self.cbState.addItem(state[1]['name'],state[1]['fips'])
        self.init_counties()
            
    def init_counties(self):
        self.cbCounty.clear()
        state_fips = self.cbState.currentData()
        counties = self.states[self.states['fips'] == state_fips]['counties']
        for county in counties.iloc[0]:
            self.cbCounty.addItem(county['name'],county['fips'])
            
            
class SettingsDialog(QtWidgets.QDialog, FORM_CLASS_SETTINGS):
    def __init__(self, parent=None):
        super(SettingsDialog, self).__init__(parent)
        # self.setWindowTitle("Settings")
        self.setupUi(self)
        
        self.clbApi.clicked.connect(self.api_clicked)
        self.btnSetDataPath.clicked.connect(self.open_directory_dialog)
        self.btnSettingsSave.clicked.connect(self.save_settings)
        
        self.txtApiKey.setText(CENSUS_API_KEY)
        self.txtDataPath.setText(DATA_PATH)
        
    def save_settings(self):
        pass
        # _settings['census_api_key'] = self.txtApiKey.text()
        # _settings['data_path'] = self.txtDataPath.text()
        
        # with open(os.path.join(os.path.dirname(__file__), 'settings.json'), 'w') as f:
        #     json.dump(_settings, f)
        
        
        
    def api_clicked(self):
        print(self.clbApi.isChecked())
        
    def open_directory_dialog(self):
        # Open the directory selection dialog
        directory = QtWidgets.QFileDialog.getExistingDirectory(self, "Select Directory", QDir.homePath())
        if directory:  # If a directory was selected (not cancelled)
            self.txtDataPath.setText(directory)
            self.selected_path = directory

